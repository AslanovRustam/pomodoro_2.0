{"version":3,"file":"static/js/518.85b462ed.chunk.js","mappings":"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","sources":["webpack://pomodoro_2.0/./src/Pages/pages.module.css?89b6","Pages/Home.jsx","webpack://pomodoro_2.0/./src/components/Container/container.module.css?0cd8","components/Container/Container.jsx","../node_modules/react-circular-progressbar/src/constants.ts","../node_modules/react-circular-progressbar/src/Path.tsx","../node_modules/react-circular-progressbar/src/CircularProgressbar.tsx","../node_modules/react-circular-progressbar/src/buildStyles.ts","webpack://pomodoro_2.0/./src/components/Timer/timer.module.css?6705","webpack://pomodoro_2.0/./src/components/Break/break.module.css?b5ba","components/Break/Break.jsx","components/Timer/Timer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"pages_container__gcDSE\"};","import Container from \"../components/Container/Container\";\r\nimport Timer from \"../components/Timer/Timer\";\r\nimport s from \"./pages.module.css\";\r\n\r\nexport default function Home() {\r\n  return (\r\n    <Container>\r\n      <div className={s.container}>\r\n        <Timer />\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container_container__E3MIQ\",\"hide\":\"container_hide__rXkSF\"};","import { useData } from \"../../helpers/DataContext\";\r\nimport s from \"./container.module.css\";\r\n\r\nexport default function Container({ children }) {\r\n  const { hideSidebar } = useData();\r\n  return (\r\n    <section className={`${s.container} ${hideSidebar && s.hide}`}>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n","export const VIEWBOX_WIDTH = 100;\nexport const VIEWBOX_HEIGHT = 100;\nexport const VIEWBOX_HEIGHT_HALF = 50;\nexport const VIEWBOX_CENTER_X = 50;\nexport const VIEWBOX_CENTER_Y = 50;\n","import * as React from 'react';\nimport { VIEWBOX_CENTER_X, VIEWBOX_CENTER_Y } from './constants';\n\nfunction Path({\n  className,\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n  strokeWidth,\n  style,\n}: {\n  className?: string;\n  counterClockwise: boolean;\n  dashRatio: number;\n  pathRadius: number;\n  strokeWidth: number;\n  style?: object;\n}) {\n  return (\n    <path\n      className={className}\n      style={Object.assign({}, style, getDashStyle({ pathRadius, dashRatio, counterClockwise }))}\n      d={getPathDescription({\n        pathRadius,\n        counterClockwise,\n      })}\n      strokeWidth={strokeWidth}\n      fillOpacity={0}\n    />\n  );\n}\n\n// SVG path description specifies how the path should be drawn\nfunction getPathDescription({\n  pathRadius,\n  counterClockwise,\n}: {\n  pathRadius: number;\n  counterClockwise: boolean;\n}) {\n  const radius = pathRadius;\n  const rotation = counterClockwise ? 1 : 0;\n\n  // Move to center of canvas\n  // Relative move to top canvas\n  // Relative arc to bottom of canvas\n  // Relative arc to top of canvas\n  return `\n      M ${VIEWBOX_CENTER_X},${VIEWBOX_CENTER_Y}\n      m 0,-${radius}\n      a ${radius},${radius} ${rotation} 1 1 0,${2 * radius}\n      a ${radius},${radius} ${rotation} 1 1 0,-${2 * radius}\n    `;\n}\n\nfunction getDashStyle({\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n}: {\n  counterClockwise: boolean;\n  dashRatio: number;\n  pathRadius: number;\n}) {\n  const diameter = Math.PI * 2 * pathRadius;\n  const gapLength = (1 - dashRatio) * diameter;\n\n  return {\n    // Have dash be full diameter, and gap be full diameter\n    strokeDasharray: `${diameter}px ${diameter}px`,\n    // Shift dash backward by gapLength, so gap starts appearing at correct distance\n    strokeDashoffset: `${counterClockwise ? -gapLength : gapLength}px`,\n  };\n}\n\nexport default Path;\n","import * as React from 'react';\n\nimport {\n  VIEWBOX_WIDTH,\n  VIEWBOX_HEIGHT,\n  VIEWBOX_HEIGHT_HALF,\n  VIEWBOX_CENTER_X,\n  VIEWBOX_CENTER_Y,\n} from './constants';\nimport Path from './Path';\nimport { CircularProgressbarDefaultProps, CircularProgressbarProps } from './types';\n\nclass CircularProgressbar extends React.Component<CircularProgressbarProps> {\n  static defaultProps: CircularProgressbarDefaultProps = {\n    background: false,\n    backgroundPadding: 0,\n    circleRatio: 1,\n    classes: {\n      root: 'CircularProgressbar',\n      trail: 'CircularProgressbar-trail',\n      path: 'CircularProgressbar-path',\n      text: 'CircularProgressbar-text',\n      background: 'CircularProgressbar-background',\n    },\n    counterClockwise: false,\n    className: '',\n    maxValue: 100,\n    minValue: 0,\n    strokeWidth: 8,\n    styles: {\n      root: {},\n      trail: {},\n      path: {},\n      text: {},\n      background: {},\n    },\n    text: '',\n  };\n\n  getBackgroundPadding() {\n    if (!this.props.background) {\n      // Don't add padding if not displaying background\n      return 0;\n    }\n    return this.props.backgroundPadding;\n  }\n\n  getPathRadius() {\n    // The radius of the path is defined to be in the middle, so in order for the path to\n    // fit perfectly inside the 100x100 viewBox, need to subtract half the strokeWidth\n    return VIEWBOX_HEIGHT_HALF - this.props.strokeWidth / 2 - this.getBackgroundPadding();\n  }\n\n  // Ratio of path length to trail length, as a value between 0 and 1\n  getPathRatio() {\n    const { value, minValue, maxValue } = this.props;\n    const boundedValue = Math.min(Math.max(value, minValue), maxValue);\n    return (boundedValue - minValue) / (maxValue - minValue);\n  }\n\n  render() {\n    const {\n      circleRatio,\n      className,\n      classes,\n      counterClockwise,\n      styles,\n      strokeWidth,\n      text,\n    } = this.props;\n\n    const pathRadius = this.getPathRadius();\n    const pathRatio = this.getPathRatio();\n\n    return (\n      <svg\n        className={`${classes.root} ${className}`}\n        style={styles.root}\n        viewBox={`0 0 ${VIEWBOX_WIDTH} ${VIEWBOX_HEIGHT}`}\n        data-test-id=\"CircularProgressbar\"\n      >\n        {this.props.background ? (\n          <circle\n            className={classes.background}\n            style={styles.background}\n            cx={VIEWBOX_CENTER_X}\n            cy={VIEWBOX_CENTER_Y}\n            r={VIEWBOX_HEIGHT_HALF}\n          />\n        ) : null}\n\n        <Path\n          className={classes.trail}\n          counterClockwise={counterClockwise}\n          dashRatio={circleRatio}\n          pathRadius={pathRadius}\n          strokeWidth={strokeWidth}\n          style={styles.trail}\n        />\n\n        <Path\n          className={classes.path}\n          counterClockwise={counterClockwise}\n          dashRatio={pathRatio * circleRatio}\n          pathRadius={pathRadius}\n          strokeWidth={strokeWidth}\n          style={styles.path}\n        />\n\n        {text ? (\n          <text\n            className={classes.text}\n            style={styles.text}\n            x={VIEWBOX_CENTER_X}\n            y={VIEWBOX_CENTER_Y}\n          >\n            {text}\n          </text>\n        ) : null}\n      </svg>\n    );\n  }\n}\n\nexport default CircularProgressbar;\n","import { CircularProgressbarStyles } from './types';\n\nexport default function buildStyles({\n  rotation,\n  strokeLinecap,\n  textColor,\n  textSize,\n  pathColor,\n  pathTransition,\n  pathTransitionDuration,\n  trailColor,\n  backgroundColor,\n}: {\n  rotation?: number; // Number of turns, 0-1\n  strokeLinecap?: any;\n  textColor?: string;\n  textSize?: string | number;\n  pathColor?: string;\n  pathTransition?: string;\n  pathTransitionDuration?: number; // Measured in seconds\n  trailColor?: string;\n  backgroundColor?: string;\n}): CircularProgressbarStyles {\n  const rotationTransform = rotation == null ? undefined : `rotate(${rotation}turn)`;\n  const rotationTransformOrigin = rotation == null ? undefined : 'center center';\n\n  return {\n    root: {},\n    path: removeUndefinedValues({\n      stroke: pathColor,\n      strokeLinecap: strokeLinecap,\n      transform: rotationTransform,\n      transformOrigin: rotationTransformOrigin,\n      transition: pathTransition,\n      transitionDuration: pathTransitionDuration == null ? undefined : `${pathTransitionDuration}s`,\n    }),\n    trail: removeUndefinedValues({\n      stroke: trailColor,\n      strokeLinecap: strokeLinecap,\n      transform: rotationTransform,\n      transformOrigin: rotationTransformOrigin,\n    }),\n    text: removeUndefinedValues({\n      fill: textColor,\n      fontSize: textSize,\n    }),\n    background: removeUndefinedValues({\n      fill: backgroundColor,\n    }),\n  };\n}\n\nfunction removeUndefinedValues(obj: { [key: string]: any }) {\n  Object.keys(obj).forEach((key: string) => {\n    if (obj[key] == null) {\n      delete obj[key];\n    }\n  });\n  return obj;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"timer_container__vfqiL\",\"circle\":\"timer_circle__id2oQ\",\"buttons\":\"timer_buttons__RgLM7\",\"resetBtn\":\"timer_resetBtn__XN0Dg\",\"break\":\"timer_break__LZpiz\",\"breakTime\":\"timer_breakTime__6rbwL\",\"bubble\":\"timer_bubble__ziRGU\",\"morph\":\"timer_morph__QHzi+\"};","// extracted by mini-css-extract-plugin\nexport default {\"timer\":\"break_timer__8XdOU\"};","import { useEffect } from \"react\";\r\nimport s from \"./break.module.css\";\r\n\r\nexport default function Break({\r\n  breakRunning,\r\n  setBreakRunning,\r\n  breakTimeRemaining,\r\n  setBreakTimeRemaining,\r\n  startMainTimer,\r\n}) {\r\n  useEffect(() => {\r\n    let interval;\r\n\r\n    if (breakRunning && breakTimeRemaining > 0) {\r\n      interval = setInterval(() => {\r\n        setBreakTimeRemaining((prevTime) => prevTime - 1);\r\n      }, 1000);\r\n    }\r\n\r\n    if (breakTimeRemaining === 0) {\r\n      clearInterval(interval);\r\n      setBreakRunning(false);\r\n      startMainTimer();\r\n    }\r\n\r\n    return () => clearInterval(interval);\r\n  }, [breakTimeRemaining, breakRunning]);\r\n\r\n  const minutes = Math.floor(breakTimeRemaining / 60);\r\n  const seconds = breakTimeRemaining % 60;\r\n\r\n  const formattedTime = `${minutes}m ${\r\n    seconds < 10 ? `0${seconds}` : seconds\r\n  }s`;\r\n  return <div className={s.timer}>break time {formattedTime}</div>;\r\n}\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { useData } from \"../../helpers/DataContext\";\r\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\r\nimport Button from \"../Button/Button\";\r\nimport s from \"./timer.module.css\";\r\nimport Break from \"../Break/Break\";\r\nimport finish from \"../../assets/alarm.mp3\";\r\nimport btnClick from \"../../assets/press.wav\";\r\n\r\nexport default function Timer() {\r\n  const { timerSettings } = useData();\r\n  const [initialtimeForTask] = useState(timerSettings.work);\r\n  const [timerRunning, setTimerRunning] = useState(false);\r\n  const [breakRunning, setBreakRunning] = useState(false);\r\n  const [timeRemaining, setTimeRemaining] = useState(timerSettings.work);\r\n  const [breakTimeRemaining, setBreakTimeRemaining] = useState(\r\n    timerSettings.rest\r\n  );\r\n  const audioClickRef = useRef(null);\r\n  const audioFinishRef = useRef(new Audio(finish));\r\n\r\n  useEffect(() => {\r\n    if (breakRunning) {\r\n      document.body.classList.add(s.breakTime);\r\n      return;\r\n    }\r\n    document.body.classList.remove(s.breakTime);\r\n  }, [breakRunning]);\r\n\r\n  useEffect(() => {\r\n    let interval;\r\n\r\n    if (timerRunning && timeRemaining > 0) {\r\n      interval = setInterval(() => {\r\n        setTimeRemaining((prevTime) => prevTime - 1);\r\n      }, 1000);\r\n    }\r\n\r\n    if (timeRemaining === 0) {\r\n      clearInterval(interval);\r\n      setTimerRunning(false);\r\n      const audio = audioFinishRef.current;\r\n      audio.play();\r\n    }\r\n\r\n    return () => clearInterval(interval);\r\n  }, [timeRemaining, timerRunning, setTimeRemaining]);\r\n\r\n  const minutes = Math.floor(timeRemaining / 60);\r\n  const seconds = timeRemaining % 60;\r\n\r\n  const formattedTime = `${minutes}m ${\r\n    seconds < 10 ? `0${seconds}` : seconds\r\n  }s`;\r\n  const onBtnClickAudio = () => {\r\n    const audio = audioClickRef.current;\r\n    audio.play();\r\n  };\r\n  const start = () => {\r\n    setTimerRunning(!timerRunning);\r\n    onBtnClickAudio();\r\n  };\r\n  const pause = () => {\r\n    setBreakRunning(!breakRunning);\r\n    setTimerRunning(!timerRunning);\r\n    onBtnClickAudio();\r\n  };\r\n  const reset = () => {\r\n    setTimerRunning(false);\r\n    setBreakRunning(false);\r\n    setTimeRemaining(timerSettings.work);\r\n    setBreakTimeRemaining(timerSettings.rest);\r\n    onBtnClickAudio();\r\n  };\r\n  const textStartBtn = timerRunning ? \"take a breath\" : \"start\";\r\n  const btnDisabled = breakTimeRemaining === 0;\r\n  return (\r\n    <div className={s.container}>\r\n      <CircularProgressbar\r\n        value={timeRemaining}\r\n        maxValue={initialtimeForTask}\r\n        minValue={0}\r\n        strokeWidth={5}\r\n        counterClockwise={true}\r\n        background={true}\r\n        className={s.circle}\r\n        styles={buildStyles({\r\n          rotation: 1,\r\n          strokeLinecap: \"butt\",\r\n          pathTransitionDuration: 0.5,\r\n          pathColor: \"#fdeedf\",\r\n          trailColor: `#f60 `,\r\n          textColor: \"white\",\r\n        })}\r\n        text={formattedTime}\r\n      />\r\n      <div className={s.buttons}>\r\n        <audio ref={audioClickRef} src={btnClick} preload=\"auto\" />\r\n\r\n        <Button\r\n          text={textStartBtn}\r\n          onClick={timeRemaining !== initialtimeForTask ? pause : start}\r\n          fontSize=\"2em\"\r\n          disabled={btnDisabled}\r\n        />\r\n\r\n        {timeRemaining !== initialtimeForTask && (\r\n          <div className={s.resetBtn}>\r\n            <Button\r\n              text=\"reset\"\r\n              onClick={reset}\r\n              fontSize=\"2em\"\r\n              disabled={timeRemaining === initialtimeForTask}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className={s.break}>\r\n        {timeRemaining !== initialtimeForTask && breakRunning && (\r\n          <Break\r\n            breakRunning={breakRunning}\r\n            setBreakRunning={setBreakRunning}\r\n            breakTimeRemaining={breakTimeRemaining}\r\n            setBreakTimeRemaining={setBreakTimeRemaining}\r\n            startMainTimer={start}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className={s.bubble}></div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["Home","_jsx","Container","children","className","s","container","Timer","_ref","hideSidebar","useData","concat","hide","VIEWBOX_CENTER_X","VIEWBOX_CENTER_Y","Path","_a","counterClockwise","dashRatio","pathRadius","strokeWidth","style","createElement","Object","assign","getDashStyle","d","getPathDescription","fillOpacity","rotation","diameter","Math","PI","gapLength","strokeDasharray","strokeDashoffset","CircularProgressbar","_super","__extends","prototype","getBackgroundPadding","this","props","background","backgroundPadding","getPathRadius","getPathRatio","value","minValue","maxValue","min","max","render","circleRatio","classes","styles","text","pathRatio","root","viewBox","cx","cy","r","trail","path","x","y","defaultProps","Component","buildStyles","strokeLinecap","textColor","textSize","pathColor","pathTransition","pathTransitionDuration","trailColor","backgroundColor","rotationTransform","undefined","rotationTransformOrigin","removeUndefinedValues","stroke","transform","transformOrigin","transition","transitionDuration","fill","fontSize","obj","keys","forEach","key","Break","breakRunning","setBreakRunning","breakTimeRemaining","setBreakTimeRemaining","startMainTimer","useEffect","interval","setInterval","prevTime","clearInterval","minutes","floor","seconds","formattedTime","_jsxs","timer","timerSettings","_useState","useState","work","initialtimeForTask","_slicedToArray","_useState3","_useState4","timerRunning","setTimerRunning","_useState5","_useState6","_useState7","_useState8","timeRemaining","setTimeRemaining","_useState9","rest","_useState10","audioClickRef","useRef","audioFinishRef","Audio","finish","document","body","classList","add","breakTime","remove","current","play","onBtnClickAudio","start","textStartBtn","btnDisabled","circle","buttons","ref","src","btnClick","preload","Button","onClick","disabled","resetBtn","break","bubble"],"sourceRoot":""}